[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "healthcase"
version = "1.0.0"
description = "Educational symptom checker using AI for learning purposes"
readme = "README.md"
license = {file = "LICENSE"}
requires-python = ">=3.8"
authors = [
    {name = "Healthcase Team", email = "team@healthcase.example.com"},
]
maintainers = [
    {name = "Healthcase Team", email = "team@healthcase.example.com"},
]
keywords = ["healthcare", "symptoms", "ai", "educational", "diagnosis"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Education",
    "Intended Audience :: Healthcare Industry",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Medical Science Apps.",
]
dependencies = [
    "openai>=2.3.0",
    "flask>=3.1.2",
    "flask-cors>=6.0.1",
    "python-dotenv>=1.0.0",
    "markdown>=3.5.1",
    "pydantic>=2.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
]
gui = [
    "tkinter",  # Usually included with Python
]

[project.scripts]
healthcase-cli = "healthcase.cli:main"
healthcase-gui = "healthcase.ui:main"
healthcase-api = "healthcase.api:main"

[project.urls]
Homepage = "https://github.com/healthcase/symptom-checker"
Documentation = "https://healthcase.readthedocs.io/"
Repository = "https://github.com/healthcase/symptom-checker.git"
Issues = "https://github.com/healthcase/symptom-checker/issues"
Changelog = "https://github.com/healthcase/symptom-checker/blob/main/CHANGELOG.md"

[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.packages.find]
where = ["src"]
exclude = ["tests*"]

[tool.setuptools.package-data]
healthcase = ["*.txt", "*.md"]

[tool.black]
line-length = 100
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 100
known_first_party = ["healthcase"]
known_third_party = ["openai", "flask", "pydantic"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = ["tkinter.*"]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --cov=healthcase --cov-report=html --cov-report=term-missing"
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"

[tool.coverage.run]
source = ["src/healthcase"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "src/healthcase/__main__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
]